{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "7bd93ce4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "d2f6f0b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def sigmod(x):\n",
    "    return 1 / (1 + np.exp(-x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "7fb97411",
   "metadata": {},
   "outputs": [],
   "source": [
    "def sigmodDerivative(x):\n",
    "\n",
    "    return np.multiply(x, np.subtract(1, x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "f6440a66",
   "metadata": {},
   "outputs": [],
   "source": [
    "def forward(weightsA, weightsB, bias):\n",
    "    # 前向传播\n",
    "    # 隐层\n",
    "    neth1 = inputX[0] * weightsA[0][0] + inputX[1] * weightsA[0][1] + bias[0]*weightsA[0][2]\n",
    "    outh1 = sigmod(neth1)\n",
    "    print(\"隐层第一个神经元\", neth1, outh1)\n",
    "    \n",
    "    neth2 = inputX[0] * weightsA[1][0] + inputX[1] * weightsA[1][1] + bias[1]*weightsA[1][2]\n",
    "    outh2 = sigmod(neth2)\n",
    "    print(\"隐层第二个神经元\", neth2, outh2)\n",
    "    \n",
    "        # 输出层\n",
    "    neto1 = outh1 * weightsB[0] + outh2 * weightsB[1] + bias[2]* weightsB[2] \n",
    "    outo1 = sigmod(neto1)\n",
    "    print(\"输出层第一个神经元\", neto1, outo1)\n",
    "    \n",
    "        # 向量化\n",
    "    outA = np.array([outh1,outh2,1])\n",
    "    outB = np.array([outo1])\n",
    "    \n",
    "    Etotal = 0.5 * np.subtract(y, outB) ** 2\n",
    "    print(\"误差值：\", Etotal)\n",
    "\n",
    "    \n",
    "    return outA, outB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "bfce73b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def backpagration(outA, outB):\n",
    "    LR=0.1\n",
    "    # 反向传播\n",
    "    deltaB = np.multiply(np.subtract(outB, y), sigmodDerivative(outB),outA)\n",
    "    print(\"deltaB：\", deltaB)\n",
    "\n",
    "    deltaA = np.multiply(np.matmul(np.transpose(weightsB), deltaB), sigmodDerivative(outA))\n",
    "    print(\"deltaA：\", deltaA)\n",
    "\n",
    "    deltaWB = np.matmul(deltaB.reshape(1, 1), outA.reshape(1, 3))\n",
    "    print(\"deltaWB：\", deltaWB)\n",
    "\n",
    "    deltaWA = np.matmul(deltaA.reshape(1, 1), inputX.reshape(1, 3))\n",
    "    print(\"deltaWA\", deltaWA)\n",
    "    \n",
    "        # 权重参数更新\n",
    "    weightsB_new = np.subtract(weightsB, deltaWB)\n",
    "    print(\"weightsB_new\", weightsB_new)\n",
    "\n",
    "    bias[3] = np.subtract(bias[3], LR*deltaB[1])\n",
    "    print(\"biasB\", bias[3])\n",
    "    bias[2] = np.subtract(bias[2], LR*deltaB[0])\n",
    "    print(\"biasB\", bias[2])\n",
    "\n",
    "    weightsA_new = np.subtract(weightsA, deltaWA)\n",
    "    print(\"weightsA_new\", weightsA_new)\n",
    "\n",
    "    bias[1] = np.subtract(bias[1], LR*deltaA[1])\n",
    "    print(\"biasA\", bias[1])\n",
    "    bias[0] = np.subtract(bias[0], LR*deltaA[0])\n",
    "    print(\"biasA\", bias[0])\n",
    "    print(\"all bias\", bias)\n",
    "\n",
    "    return weightsA_new, weightsB_new, bias"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "a70eae7b",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "第一次前向传播\n",
      "隐层第一个神经元 2.5 0.9241418199787566\n",
      "隐层第二个神经元 -1.0 0.2689414213699951\n",
      "输出层第一个神经元 0.05861253066375416 0.5146489391238234\n",
      "误差值： [0.11778283]\n",
      "反向传播-参数更新\n",
      "deltaB： [-0.12123361 -0.12123361 -0.12123361]\n",
      "deltaA： [0.00823972 0.00823972 0.00823972]\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "cannot reshape array of size 3 into shape (1,1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_22040/3975321727.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     13\u001b[0m     \u001b[0moutA\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0moutB\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mforward\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mweightsA\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mweightsB\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbias\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     14\u001b[0m     \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"反向传播-参数更新\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 15\u001b[1;33m     \u001b[0mweightsA_new\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mweightsB_new\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbias\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mbackpagration\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0moutA\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0moutB\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     16\u001b[0m     \u001b[1;31m# 更新完毕\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     17\u001b[0m     \u001b[1;31m# 验证权重参数--第二次前向传播\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_22040/413342437.py\u001b[0m in \u001b[0;36mbackpagration\u001b[1;34m(outA, outB)\u001b[0m\n\u001b[0;32m      8\u001b[0m     \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"deltaA：\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdeltaA\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      9\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 10\u001b[1;33m     \u001b[0mdeltaWB\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmatmul\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdeltaB\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0moutA\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m3\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     11\u001b[0m     \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"deltaWB：\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdeltaWB\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     12\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: cannot reshape array of size 3 into shape (1,1)"
     ]
    }
   ],
   "source": [
    "if __name__==\"__main__\":\n",
    "    # 初始化数据\n",
    "    # 权重参数\n",
    "    bias = np.array([1, 1, 1.0, 1.0])\n",
    "    weightsA = np.array([[2.5, 1,1.5], [-1.5, -3,2.0]])\n",
    "    weightsB = np.array([1.0,0.5,-1.0])\n",
    "    # 期望值\n",
    "    y = np.array([1])\n",
    "    # 输入层\n",
    "    inputX = np.array([0, 1.0])\n",
    "\n",
    "    print(\"第一次前向传播\")\n",
    "    outA, outB = forward(weightsA, weightsB, bias)\n",
    "    print(\"反向传播-参数更新\")\n",
    "    weightsA_new, weightsB_new, bias = backpagration(outA, outB)\n",
    "    # 更新完毕\n",
    "    # 验证权重参数--第二次前向传播\n",
    "    print(\"第二次前向传播\")\n",
    "    forward(weightsA_new, weightsB_new, bias)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3856af81",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "08626d75",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
